//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tao.LAS.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.ConnectionString)]
        [global::System.Configuration.DefaultSettingValueAttribute("Data Source=|DataDirectory|\\ActivityDB.sdf;Max Database Size=4091;")]
        public string LASDBConnectionString {
            get {
                return ((string)(this["LASDBConnectionString"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT Username, COUNT(Action) AS [Total Votes] FROM UserActivity WHERE (Action =" +
            " N\'voted up\') OR (Action = N\'voted down\') GROUP BY Username ORDER BY [Total Vote" +
            "s] DESC\r\n")]
        public string sqlTopVotersQuery {
            get {
                return ((string)(this["sqlTopVotersQuery"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT Username, COUNT(Username) AS [Total Votes] FROM UserActivity GROUP BY Acti" +
            "on, Username HAVING (Action = N\'voted down\') ORDER BY [Total Votes] DESC")]
        public string sqlTopDownVotersQuery {
            get {
                return ((string)(this["sqlTopDownVotersQuery"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT Username, COUNT(Username) AS [Total Votes] FROM UserActivity GROUP BY Acti" +
            "on, Username HAVING (Action = N\'voted up\') ORDER BY [Total Votes] DESC")]
        public string sqlTopUpVotersQuery {
            get {
                return ((string)(this["sqlTopUpVotersQuery"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT        Target AS Username, COUNT(Target) AS [Total up votes] \r\nFROM       " +
            "     UserActivity \r\nWHERE        (Action = N\'voted up\') \r\nGROUP BY Target \r\nORDE" +
            "R BY [Total up votes] DESC")]
        public string sqlTopUpVoteRecipientsQuery {
            get {
                return ((string)(this["sqlTopUpVoteRecipientsQuery"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT Target AS Username, COUNT(Target) AS [Total down votes] \r\nFROM   UserActiv" +
            "ity \r\nWHERE  (Action = N\'voted down\') \r\nGROUP BY Target \r\nORDER BY [Total down v" +
            "otes] DESC")]
        public string sqlTopDownVoteRecipientsQuery {
            get {
                return ((string)(this["sqlTopDownVoteRecipientsQuery"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT        Username, COUNT(Username) AS [Total Uploads] \r\nFROM            User" +
            "Activity \r\nWHERE        (Action = N\'Uploaded content\') \r\nGROUP BY Username \r\nORD" +
            "ER BY [Total Uploads] DESC")]
        public string sqlTopUploadersQuery {
            get {
                return ((string)(this["sqlTopUploadersQuery"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT        Username, COUNT(Username) AS [Total comments] \r\nFROM            Use" +
            "rActivity \r\nWHERE        (Action = N\'Added comment\') \r\nGROUP BY Username \r\nORDER" +
            " BY [Total Comments] DESC")]
        public string sqlTopCommentorsQuery {
            get {
                return ((string)(this["sqlTopCommentorsQuery"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("CREATE TABLE UserActivity(Id int NOT NULL PRIMARY KEY IDENTITY,RawData nVarChar(2" +
            "000) NULL,PageId nvarchar(6) NULL,Username nvarchar(100) NULL,Action nvarchar(10" +
            "0)NULL,Target nvarchar(1000) Null,TargetLink nvarchar(1000) NULL\r\n)\r\n")]
        public string sqlCreateActivityTable {
            get {
                return ((string)(this["sqlCreateActivityTable"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT COUNT(TABLE_NAME) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = \'TARGE" +
            "T_TABLE\'")]
        public string sqlCheckTableExists {
            get {
                return ((string)(this["sqlCheckTableExists"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("CREATE TABLE ErrorLog ( Id int NOT NULL PRIMARY KEY IDENTITY, Time datetime NULL," +
            " Message ntext NULL )")]
        public string sqlCreateErrorLogTable {
            get {
                return ((string)(this["sqlCreateErrorLogTable"]));
            }
            set {
                this["sqlCreateErrorLogTable"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("www.liveleak.com/recent_activity?a=browse&ajax=1&page=")]
        public string strActivityUrl {
            get {
                return ((string)(this["strActivityUrl"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<h1><span class=""Title"">LiveLeak Activity Spy</span></h1>version 1.0
<h3>Usage instructions</h3>
<h1> </h1>
<ol>
    <li>Choose&nbsp; a history depth. Use the slider or type in a number.</li>
    <li>Click the Go button.</li>
    <li>Wait for the application to retrieve all the data.</li>
    <li>View stats or analyse the data.</li>
</ol>
<h3>Notes</h3>
<ul>
    <li><strong>It's slow! can't you speed it up?</strong><br />
    <div align=""justify"">     It is slow by design. It is possible to make the applicaiton around 20 times faster by making it multi threaded. However, I love LiveLeak and if you do too, you wouldn't want to.&nbsp; There's no need to hammer the hell out of LiveLeaks servers.&nbsp; Currently the application downloads data at around the same speed that a user would browse the data.</div>
    </li>
    <li><strong>'Acc' stands for Accuracy.</strong><br />
    <div align=""justify"">     Accuracy. Each error detected could well be 1 vote, or upload etc.&nbsp; Since the overall results ommit the errors the 'Acc' value is an indicator that the sample data <em>may </em>be around a certian percentage out, because of any errors detected during parsing and saving the data.&nbsp; For the most part the data will be 100% accurate, therefore treat the 'Acc' figure as just an indicator.</div>
    </li>
</ul>")]
        public string htmlStartPage {
            get {
                return ((string)(this["htmlStartPage"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("http://www.liveleak.com/")]
        public string strLiveLeakUrl {
            get {
                return ((string)(this["strLiveLeakUrl"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("http://www.liveleak.com/c/")]
        public string strLiveLeakUserUrl {
            get {
                return ((string)(this["strLiveLeakUserUrl"]));
            }
            set {
                this["strLiveLeakUserUrl"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT COUNT(*) FROM UserActivity")]
        public string sqlGetTotalRecordCount {
            get {
                return ((string)(this["sqlGetTotalRecordCount"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT COUNT(*) FROM ErrorLog")]
        public string sqlGetTotalErrorCount {
            get {
                return ((string)(this["sqlGetTotalErrorCount"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT RawData, Id FROM UserActivity ORDER BY Id DESC")]
        public string sqlGetMaxHistoryDepthRawData {
            get {
                return ((string)(this["sqlGetMaxHistoryDepthRawData"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT Username, Action, Target, TargetLink FROM UserActivity Where Target = \'[TA" +
            "RGET]\'")]
        public string sqlGetActivityByTarget {
            get {
                return ((string)(this["sqlGetActivityByTarget"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<body>Sorry, no recent_activity items found!</body>")]
        public string strNoMorePages {
            get {
                return ((string)(this["strNoMorePages"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("|DataDirectory|\\ActivityDB.sdf")]
        public string strDBFullPath {
            get {
                return ((string)(this["strDBFullPath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT        Target, COUNT(Action) AS Count\r\nFROM          UserActivity\r\nGROUP B" +
            "Y Username, Action, Target\r\nHAVING        (Action = N\'[-ACTION-]\') AND (Username" +
            " = N\'[-USER-]\')\r\nORDER BY Count DESC")]
        public string sqlRptVotedDown {
            get {
                return ((string)(this["sqlRptVotedDown"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT        Target, COUNT(Action) AS Count\r\nFROM          UserActivity\r\nGROUP B" +
            "Y Username, Action, Target\r\nHAVING        (Action = N\'[-ACTION-]\') AND (Username" +
            " = N\'[-USER-]\')\r\nORDER BY Count DESC")]
        public string sqlRptVotedUp {
            get {
                return ((string)(this["sqlRptVotedUp"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT DISTINCT Target\r\nFROM            UserActivity\r\nGROUP BY Username, Action, " +
            "Target\r\nHAVING        (Action = N\'[-ACTION-]\') AND (Username = N\'[-USER-]\')")]
        public string sqlRptUploads {
            get {
                return ((string)(this["sqlRptUploads"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT DISTINCT Target\r\nFROM            UserActivity\r\nGROUP BY Username, Action, " +
            "Target\r\nHAVING        (Action = N\'[-ACTION-]\') AND (Username = N\'[-USER-]\')")]
        public string sqlRptSubscribed {
            get {
                return ((string)(this["sqlRptSubscribed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT DISTINCT Target\r\nFROM            UserActivity\r\nGROUP BY Username, Action, " +
            "Target\r\nHAVING        (Action = N\'[-ACTION-]\') AND (Username = N\'[-USER-]\')")]
        public string sqlRptUnSubscribed {
            get {
                return ((string)(this["sqlRptUnSubscribed"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT DISTINCT Target\r\nFROM            UserActivity\r\nGROUP BY Username, Action, " +
            "Target\r\nHAVING        (Action = N\'[-ACTION-]\') AND (Username = N\'[-USER-]\')\r\nORD" +
            "ER BY Target")]
        public string sqlRptVotedOnItems {
            get {
                return ((string)(this["sqlRptVotedOnItems"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT DISTINCT Target\r\nFROM            UserActivity\r\nGROUP BY Username, Action, " +
            "Target\r\nHAVING        (Action = N\'[-ACTION-]\') AND (Username = N\'[-USER-]\')\r\nORD" +
            "ER BY Target")]
        public string sqlRptFavoured {
            get {
                return ((string)(this["sqlRptFavoured"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SELECT        COUNT(Target) AS Count, Target, TargetLink\r\nFROM            UserAct" +
            "ivity\r\nGROUP BY Username, Action, Target, TargetLink\r\nHAVING        (Action = N\'" +
            "[-ACTION-]\') AND (Username = N\'[-USER-]\')\r\nORDER BY Count DESC")]
        public string sqlRptComments {
            get {
                return ((string)(this["sqlRptComments"]));
            }
        }
    }
}
